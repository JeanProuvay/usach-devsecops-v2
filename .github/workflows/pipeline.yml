name: workflow
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop, feature/* ]

jobs:
# --------------------------------- BUILD ---------------------------------

  BUILD:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Instalar dependencias (si no están instaladas)
        run: npm install

      - name: Compilar y empaquetar
        run: |
          npm run build

      - name: Upload build output
        uses: actions/upload-artifact@master
        with:
          name: build-artifact
          path: ${{ github.workspace }}/.next
          include-hidden-files: true
# --------------------------------- SAST ---------------------------------

  SAST:
    needs: BUILD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build-artifact
          path: ${{ github.workspace }}/.next
          include-hidden-files: true

      - name: Validando existencia del proyecto en sonar
        run: |
          set +e
          curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=usach-devsecops-v2' -d 'project=usach-devsecops-v2' -d 'organization=jeanprouvay' -d 'visibility=public'
          if [ $? -ne 0 ]; then
            echo "Proyecto ya existe en Sonarcloud"
            echo "::set-output name=proyectoExiste::1"
          else
            echo "Proyecto usach-devsecops-v2 creado exitosamente en Sonarcloud"
          
            echo "Se establece rama main como rama por defecto"
            curl -X POST -u "${{ secrets.SONAR_TOKEN }}:" 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main' -d 'project=usach-devsecops-v2'
          fi
          set -e

      - name: Ejecutar análisis SonarCloud
        run: |
          npx sonarqube-scanner \
            -Dsonar.projectKey=usach-devsecops-v2 \
            -Dsonar.organization=jeanprouvay \
            -Dsonar.sources=. \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.branch.name=main

      - name: Validando resultado de SonarCloud
        run: |
          projectKey="usach-devsecops-v2"
          branchName="main"
      
          issueCount=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=${projectKey}&branch=${branchName}&types=VULNERABILITY&severities=BLOCKER,CRITICAL,MAJOR" \
            | jq '.total')

          echo "Vulnerabilidades críticas/altas/medias encontradas: $issueCount"

          if [ "$issueCount" -gt 0 ]; then
            echo "Se encontraron vulnerabilidades críticas, altas o medias. Deteniendo el pipeline..."
            #exit 1
          else
            echo "No se encontraron vulnerabilidades críticas, altas ni medias. Continuando..."
          fi
# --------------------------------- SCA ---------------------------------

  SCA:
    needs: BUILD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build-artifact
          path: ${{ github.workspace }}/.next
          include-hidden-files: true

      - name: Dependency Check
        uses: dependency-check/Dependency-Check_Action@1.1.0
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: '${{ github.event.repository.name }}'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@master
        with:
          name: dependecy-check-report
          path: ${{ github.workspace }}/reports
# --------------------------------- Docker Build ---------------------------------

  DockerBuild:
    needs: BUILD
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build-artifact
          path: ${{ github.workspace }}/.next
          include-hidden-files: true

      - name: Build Docker Image
        run: |
          docker build --tag jeanpro/usach-devsecops-v2:latest .

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
         docker push jeanpro/usach-devsecops-v2:latest
# --------------------------------- Image Security ---------------------------------

  ImageSecurity:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Pull
        run: |
          docker pull jeanpro/usach-devsecops-v2:latest

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: jeanpro/usach-devsecops-v2:latest
          format: 'table'
          #exit-code: '1'
          #severity: 'CRITICAL,HIGH,MEDIUM'
# --------------------------------- DAST ---------------------------------

  DAST:
    needs: DockerBuild
    runs-on: self-hosted
    steps:
      - name: Crear red Docker
        run: |
          docker network rm zap-net || true
          docker network create zap-net

      - name: Desplegar aplicación
        run: |
          docker run -d \
            --rm \
            --network zap-net \
            --name reddit-clone-yt \
            -p 3000:3000 \
            jeanpro/usach-devsecops-v2:latest

      - name: Esperar que la aplicación esté lista
        run: |
          for i in {1..12}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "La aplicación está lista."
              exit 0
            fi
            echo "Esperando que la aplicación responda..."
            sleep 5
          done
          echo "La aplicación no respondió a tiempo."
          exit 1

      - name: Escaneo con OWASP ZAP
        run: |
          docker run --rm \
          --network zap-net \
          -v ${{ github.workspace }}:/zap/wrk/:rw \
          ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          -t http://reddit-clone-yt:3000/ \
          -J report_json.json -w report_md.md -r report_html.html \
          -I

      - name: Validar resultado de OWASP ZAP
        run: |
          if [ ! -f report_json.json ]; then
            echo "No se encontró el archivo report_json.json. Falla el análisis DAST."
            exit 1
          fi

          highAlerts=$(jq '[.site[].alerts[] | select(.riskdesc | test("High"))] | length' report_json.json)
          mediumAlerts=$(jq '[.site[].alerts[] | select(.riskdesc | test("Medium"))] | length' report_json.json)

          echo "Alertas High: $highAlerts"
          echo "Alertas Medium: $mediumAlerts"

          if [ "$highAlerts" -gt 0 ] || [ "$mediumAlerts" -gt 0 ]; then
            echo "Se encontraron vulnerabilidades críticas o medias en OWASP ZAP. Deteniendo el pipeline..."
            exit 1
          else
            echo "No se encontraron vulnerabilidades críticas ni medias en OWASP ZAP. Continuando..."
          fi